@model InternalTraining.Models.BookingCourse

@{
    ViewData["Title"] = "Course Details";
    var course = Model.Course;
    var chapters = course?.Chapters?.ToList() ?? new List<InternalTraining.Models.Chapter>();
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet" />
</head>
<body>

    <main class="main bg-light">
        <section class="pt-4">
            <div class="container-fluid">
                <div class="row">

                    <!-- Video Player -->
                    <div class="col-lg-8 mb-4">
                        <div id="video-container" class="rounded-3 shadow-sm mb-3 bg-dark position-relative" style="height: 480px;">
                            <div id="video-spinner" class="position-absolute top-50 start-50 translate-middle d-none">
                                <div class="spinner-border text-light" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>

                            @{
                                var firstLesson = chapters.SelectMany(c => c.Lessons).FirstOrDefault(l => !string.IsNullOrEmpty(l.ContentUrl));
                                if (firstLesson != null)
                                {
                                    string url = firstLesson.ContentUrl;
                                    string videoHtml = "";

                                    if (url.EndsWith(".mp4", StringComparison.OrdinalIgnoreCase))
                                    {
                                        videoHtml = $"<video id='currentVideo' class='w-100 h-100' controls onloadeddata='hideSpinner()'><source src='{url}' type='video/mp4'></video>";
                                    }
                                    else if (url.Contains("youtube.com") || url.Contains("youtu.be"))
                                    {
                                        var embedId = url.Contains("watch?v=")
                                        ? url.Split("watch?v=")[1].Split('&')[0]
                                        : url.Split("youtu.be/")[1].Split('?')[0];
                                        var embedUrl = $"https://www.youtube.com/embed/{embedId}";
                                        videoHtml = $"<iframe id='currentVideo' src='{embedUrl}' onload='hideSpinner()' style='position:absolute;top:0;left:0;width:100%;height:100%;' frameborder='0' allowfullscreen></iframe>";
                                    }
                                    @Html.Raw(videoHtml)
                                }
                                else
                                {
                                    <div class="text-white p-4">No lessons available.</div>
                                }
                            }
                        </div>

                        <div id="video-container-error" class="d-none alert alert-warning text-center">
                            <i class="bi bi-exclamation-triangle-fill text-warning me-2"></i>
                            The video is unavailable or private ‚ùó
                        </div>

                        <div class="d-flex justify-content-center mt-3">
                            <button id="nextLessonBtn" class="btn btn-lg text-white px-4" style="background-color: #143D60;">
                                Next Lesson <i class="bi bi-arrow-right-circle ms-2"></i>
                            </button>
                        </div>
                    </div>

                    <!-- Sidebar: Chapters and Lessons -->
                    <div class="col-lg-4">
                        <div class="position-sticky" style="top: 80px;">
                            <div class="mb-4">
                                <div class="card-body">
                                    <h2 class="text-white py-2 px-3 rounded" style="background-color:#143D60">
                                        <i class="bi bi-mortarboard-fill me-2"></i>@course?.Name
                                    </h2>
                                    <p class="text-dark mt-3">@course?.Description</p>
                                </div>
                            </div>

                            @for (int i = 0; i < chapters.Count; i++)
                            {
                                var chapter = chapters[i];
                                var chapterId = $"chapter{i}";
                                var chapterLessons = chapter.Lessons?.ToList() ?? new List<InternalTraining.Models.Lesson>();

                                <div class="mb-3">
                                    <div class="card-header d-flex justify-content-between align-items-center text-white"
                                         data-bs-toggle="collapse"
                                         data-bs-target="#collapse-@chapterId"
                                         style="cursor:pointer;background-color:#143D60">
                                        <h6 class="m-0 fw-bold text-white">
                                            <i class="bi bi-journal-bookmark-fill me-2"></i>
                                            Chapter @(i + 1): @chapter.Name
                                        </h6>
                                        <span class="text-light">Show lessons</span>
                                    </div>
                                    <div id="collapse-@chapterId" class="collapse">
                                        <div class="card-body px-0">
                                            <ul class="list-group list-group-flush">
                                                @for (int j = 0; j < chapterLessons.Count; j++)
                                                {
                                                    var lesson = chapterLessons[j];
                                                    <li class="list-group-item lesson-link d-flex justify-content-between align-items-center"
                                                        data-url="@lesson.ContentUrl"
                                                        id="lesson-@lesson.Id"
                                                        style="cursor:pointer;">
                                                        <div class="d-flex align-items-center">
                                                            <i class="bi bi-play-circle-fill" style="color:#143D60; font-size: 1.25rem; margin-right: 0.5rem;"></i>
                                                            <span>Lesson @(j + 1): @lesson.Title</span>
                                                        </div>
                                                        <button class="btn btn-sm text-white" style="background-color: #143D60;">Watch</button>
                                                    </li>
                                                }
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                </div>
            </div>
        </section>
    </main>

    <script>
        function hideSpinner() {
            const spinner = document.getElementById("video-spinner");
            if (spinner) spinner.classList.add("d-none");
        }

        function isYoutubeVideoAvailable(embedUrl, callback) {
            const img = new Image();
            const videoId = embedUrl.split("/embed/")[1];
            img.onload = () => callback(true);
            img.onerror = () => callback(false);
            img.src = `https://img.youtube.com/vi/${videoId}/mqdefault.jpg`;
        }

        document.addEventListener("DOMContentLoaded", function () {
            const links = document.querySelectorAll(".lesson-link");
            const videoContainer = document.getElementById("video-container");
            const errorBox = document.getElementById("video-container-error");
            const spinner = document.getElementById("video-spinner");

            links.forEach(link => {
                link.addEventListener("click", function () {
                    const url = this.getAttribute("data-url");
                    links.forEach(l => l.classList.remove("active-lesson"));
                    this.classList.add("active-lesson");

                    spinner.classList.remove("d-none");

                    let embedUrl = "";
                    let videoHtml = "";

                    if (url.endsWith(".mp4")) {
                        videoHtml = `<video id='currentVideo' class='w-100 h-100' controls onloadeddata="hideSpinner()"><source src='${url}' type='video/mp4'></video>`;
                        errorBox.classList.add("d-none");
                        videoContainer.innerHTML = videoHtml;
                    } else if (url.includes("youtube.com") || url.includes("youtu.be")) {
                        const embedId = url.includes("watch?v=")
                            ? url.split("watch?v=")[1].split('&')[0]
                            : url.split("youtu.be/")[1].split('?')[0];

                        embedUrl = `https://www.youtube.com/embed/${embedId}`;

                        isYoutubeVideoAvailable(embedUrl, function (isAvailable) {
                            if (isAvailable) {
                                videoHtml = `<iframe id='currentVideo' src='${embedUrl}' onload='hideSpinner()' style='position:absolute;top:0;left:0;width:100%;height:100%;' frameborder='0' allowfullscreen></iframe>`;
                                errorBox.classList.add("d-none");
                                videoContainer.innerHTML = videoHtml;
                            } else {
                                videoContainer.innerHTML = "";
                                errorBox.classList.remove("d-none");
                                hideSpinner();
                            }
                        });
                    }
                });
            });

            document.getElementById("nextLessonBtn")?.addEventListener("click", function () {
                const active = document.querySelector(".lesson-link.active-lesson");
                if (!active) return;

                const allLessons = Array.from(document.querySelectorAll(".lesson-link"));
                const currentIndex = allLessons.indexOf(active);

                if (currentIndex !== -1 && currentIndex < allLessons.length - 1) {
                    const nextLesson = allLessons[currentIndex + 1];
                    nextLesson.click();
                    nextLesson.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }
            });
        });
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

    <style>
        .active-lesson {
            background-color: #e2f0ff;
            font-weight: bold;
        }

        .lesson-link:hover {
            background-color: #f2f9ff;
            transition: background-color 0.2s ease-in-out;
        }

        #video-spinner {
            z-index: 10;
        }
    </style>

</body>
</html>
